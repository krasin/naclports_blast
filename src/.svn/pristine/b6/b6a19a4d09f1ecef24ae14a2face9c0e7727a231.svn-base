diff --git a/channels.h b/channels.h
index e2941c8..f60e31d 100644
--- a/channels.h
+++ b/channels.h
@@ -161,9 +161,9 @@ struct Channel {
 
 /* default window/packet sizes for tcp/x11-fwd-channel */
 #define CHAN_SES_PACKET_DEFAULT	(32*1024)
-#define CHAN_SES_WINDOW_DEFAULT	(64*CHAN_SES_PACKET_DEFAULT)
+#define CHAN_SES_WINDOW_DEFAULT	(4*CHAN_SES_PACKET_DEFAULT)
 #define CHAN_TCP_PACKET_DEFAULT	(32*1024)
-#define CHAN_TCP_WINDOW_DEFAULT	(64*CHAN_TCP_PACKET_DEFAULT)
+#define CHAN_TCP_WINDOW_DEFAULT	(4*CHAN_TCP_PACKET_DEFAULT)
 #define CHAN_X11_PACKET_DEFAULT	(16*1024)
 #define CHAN_X11_WINDOW_DEFAULT	(4*CHAN_X11_PACKET_DEFAULT)
 
diff --git a/misc.h b/misc.h
index f3142a9..e3997a2 100644
--- a/misc.h
+++ b/misc.h
@@ -15,6 +15,11 @@
 #ifndef _MISC_H
 #define _MISC_H
 
+#ifdef __native_client__ && !defined __GLIBC__
+// for struct timeval
+#include <sys/time.h>
+#endif
+
 /* misc.c */
 
 char	*chop(char *);
diff --git a/openbsd-compat/bsd-closefrom.c b/openbsd-compat/bsd-closefrom.c
index 9380b33..be53224 100644
--- a/openbsd-compat/bsd-closefrom.c
+++ b/openbsd-compat/bsd-closefrom.c
@@ -93,12 +93,14 @@ closefrom(int lowfd)
 	 * resource limits since it is possible to open a file descriptor
 	 * and then drop the rlimit such that it is below the open fd.
 	 */
+#if !defined __native_client__ || defined __GLIBC__
 #ifdef HAVE_SYSCONF
 	maxfd = sysconf(_SC_OPEN_MAX);
 #else
 	maxfd = getdtablesize();
 #endif /* HAVE_SYSCONF */
 	if (maxfd < 0)
+#endif
 	    maxfd = OPEN_MAX;
 
 	for (fd = lowfd; fd < maxfd; fd++)
diff --git a/openbsd-compat/bsd-misc.c b/openbsd-compat/bsd-misc.c
index 3ef373f..40d7021 100644
--- a/openbsd-compat/bsd-misc.c
+++ b/openbsd-compat/bsd-misc.c
@@ -169,12 +169,16 @@ int nanosleep(const struct timespec *req, struct timespec *rem)
 pid_t
 tcgetpgrp(int fd)
 {
+#ifdef __native_client__
+  return(-1);
+#else
 	int ctty_pgrp;
 
 	if (ioctl(fd, TIOCGPGRP, &ctty_pgrp) == -1)
 		return(-1);
 	else
 		return(ctty_pgrp);
+#endif
 }
 #endif /* HAVE_TCGETPGRP */
 
diff --git a/openbsd-compat/xcrypt.c b/openbsd-compat/xcrypt.c
index 6291e28..db46c0a 100644
--- a/openbsd-compat/xcrypt.c
+++ b/openbsd-compat/xcrypt.c
@@ -24,6 +24,7 @@
 
 #include "includes.h"
 
+#include <assert.h>
 #include <sys/types.h>
 #include <unistd.h>
 #include <pwd.h>
@@ -75,7 +76,11 @@ xcrypt(const char *password, const char *salt)
 # elif defined(HAVE_SECUREWARE)
         crypted = bigcrypt(password, salt);
 # else
+#ifdef __native_client__
+        assert(0);
+#else
         crypted = crypt(password, salt);
+#endif
 # endif 
 
 	return crypted;
diff --git a/ssh.c b/ssh.c
index c717dcf..94ffb2f 100644
--- a/ssh.c
+++ b/ssh.c
@@ -231,12 +231,77 @@ tilde_expand_paths(char **paths, u_int num_paths)
 	}
 }
 
+#ifdef __native_client__
+struct passwd *getpwuid(uid_t uid) {
+  static struct passwd passwd;
+  passwd.pw_name = "user";
+  passwd.pw_passwd = "*";
+  passwd.pw_uid = 0;
+  passwd.pw_gid = 0;
+  passwd.pw_gecos = "";
+  passwd.pw_dir = "/home";
+  passwd.pw_shell = "/bin/sh";
+  return &passwd;
+}
+
+int gethostname(char *name, size_t len) {
+  strncpy(name, "localhost", len);
+  return 0;
+}
+
+int getaddrinfo(const char *node, const char *service,
+    const struct addrinfo *hints,
+    struct addrinfo **res) {
+  struct hostent* h = gethostbyname(node);
+  if (!h)
+    return EAI_FAIL;
+
+  struct sockaddr_in* addr = malloc(sizeof(struct sockaddr_in));
+  addr->sin_family = h->h_addrtype;
+  addr->sin_port = htons(atoi(service));
+  memcpy(&addr->sin_addr, h->h_addr_list[0], h->h_length);
+
+  struct addrinfo* info = malloc(sizeof(struct addrinfo));
+  info->ai_flags = 0;
+  info->ai_family = addr->sin_family;
+  info->ai_socktype = hints->ai_socktype;
+  info->ai_protocol = hints->ai_protocol;
+  info->ai_canonname = h->h_name;
+  info->ai_addrlen = sizeof(*addr);
+  info->ai_addr = (struct sockaddr*)addr;
+  info->ai_next = NULL;
+  *res = info;
+  return 0;
+}
+
+int getnameinfo(const struct sockaddr *sa, socklen_t salen,
+    char *host, socklen_t hostlen,
+    char *serv, socklen_t servlen, unsigned int flags) {
+  if (sa->sa_family != AF_INET)
+    return -1;
+  const struct sockaddr_in* addr = (const struct sockaddr_in*)sa;
+  if (host)
+    strncpy(host, inet_ntoa(addr->sin_addr), hostlen);
+  if (serv)
+    snprintf(serv, servlen, "%d", ntohs(addr->sin_port));
+  return 0;
+}
+
+void freeaddrinfo(struct addrinfo *res) {
+  free(res->ai_addr);
+  free(res);
+}
+#endif
+
 /*
  * Main program for the ssh client.
  */
 int
-main(int ac, char **av)
+ssh_main(int ac, char **av)
 {
+	mkdir("/home", 0777);
+	setenv("HOME", "/home", 1);
+
 	int i, r, opt, exit_status, use_syslog;
 	char *p, *cp, *line, *argv0, buf[MAXPATHLEN], *host_arg;
 	char thishost[NI_MAXHOST], shorthost[NI_MAXHOST], portstr[NI_MAXSERV];
@@ -1586,3 +1651,5 @@ main_sigchld_handler(int sig)
 	errno = save_errno;
 }
 
+#include "ppapi_simple/ps_main.h"
+PPAPI_SIMPLE_REGISTER_MAIN(ssh_main)
diff --git a/sshconnect.h b/sshconnect.h
index fd7f7f7..0f03d8a 100644
--- a/sshconnect.h
+++ b/sshconnect.h
@@ -55,6 +55,10 @@ void	 ssh_userauth2(const char *, const char *, char *, Sensitive *);
 void	 ssh_put_password(char *);
 int	 ssh_local_cmd(const char *);
 
+#ifdef __native_client__
+#define PRIV_START
+#define PRIV_END
+#else
 /*
  * Macros to raise/lower permissions.
  */
@@ -73,3 +77,4 @@ int	 ssh_local_cmd(const char *);
 		    strerror(errno));			\
 	errno = save_errno;				\
 } while (0)
+#endif
